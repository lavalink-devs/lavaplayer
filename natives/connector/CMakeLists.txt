cmake_minimum_required(VERSION 3.0)
project(connector C)

if(${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
	include_directories("$ENV{JAVA_HOME}/include/win32")
	set(SYSNAME "win")
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
	include_directories("$ENV{JAVA_HOME}/include/linux")
	set(SYSNAME "linux")
else()
	include_directories("$ENV{JAVA_HOME}/include/darwin")
	set(SYSNAME "darwin")
endif()

if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
	add_definitions(-Dinline=__inline)

	set(COMPILER_FLAGS "")
	set(COMPILER_FLAGS_DEBUG "/MTd")
	set(COMPILER_FLAGS_RELEASE "/Ox /MT")
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
	set(COMPILER_FLAGS "-fvisibility=hidden")
	set(COMPILER_FLAGS_DEBUG "-g")
	set(COMPILER_FLAGS_RELEASE "-O3 -DNDEBUG")
	set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,-dead_strip")
else()
	set(COMPILER_FLAGS "-Wall -Wextra -Werror -Wno-unused-parameter -Wno-unused-function -fvisibility=hidden")
	set(COMPILER_FLAGS_DEBUG "-g")
	set(COMPILER_FLAGS_RELEASE "-O3 -DNDEBUG")
	set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,--gc-sections -Wl,--exclude-libs,ALL -Wl,--strip-all")
endif()

set(CMAKE_C_FLAGS_DEBUG "${COMPILER_FLAGS} ${COMPILER_FLAGS_DEBUG}")
set(CMAKE_C_FLAGS_RELEASE "${COMPILER_FLAGS} ${COMPILER_FLAGS_RELEASE}")
set(CMAKE_CXX_FLAGS_DEBUG "${COMPILER_FLAGS} ${COMPILER_FLAGS_DEBUG}")
set(CMAKE_CXX_FLAGS_RELEASE "${COMPILER_FLAGS} ${COMPILER_FLAGS_RELEASE}")

include_directories("$ENV{JAVA_HOME}/include/")

include_directories("${samplerate_SOURCE_DIR}/src")
include_directories("../opus/opus-1.4/include")
include_directories("../fdk-aac/fdk-aac-2.0.2/libAACdec/include")
include_directories("../fdk-aac/fdk-aac-2.0.2/libSYS/include")
include_directories("../vorbis/libvorbis-1.3.7/include")
include_directories("../vorbis/libogg-1.3.5/include")
link_directories("../libs/64")

if (DEFINED ENV{DIST_DIR})
	set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "$ENV{DIST_DIR}")
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE "$ENV{DIST_DIR}")
endif()

if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
	add_library(connector SHARED samplerate.c fdk-aac.c vorbis.c opus.c mpg123.c)
else()
        add_library(connector SHARED samplerate.c fdk-aac.c vorbis.c opus.c mpg123.c ${SYSNAME}/statistics.c)
endif()

target_link_libraries(connector samplerate fdk-aac vorbis opus mpg123)
