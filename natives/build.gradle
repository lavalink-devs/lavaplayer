plugins {
    id "de.undercouch.download" version "5.4.0"
}

import org.apache.tools.ant.taskdefs.condition.Os

import java.util.regex.Pattern

apply from: 'natives.gradle'

ext.opusVersion = '1.4'
ext.mpg123Version = '1.31.3'
ext.oggVersion = '1.3.5'
ext.vorbisVersion = '1.3.7'
ext.sampleRateVersion = '0.2.2'
ext.fdkAacVersion = '2.0.2'

task load {
    doLast {
        if (!file("$projectDir/samplerate/src").exists()) {
            def tarPath = "$buildDir/tmp/libsamplerate.tar"
            def downloadPath = "${tarPath}.xz"
            def unpackPath = "$buildDir/tmp"
            download.run {
                src "https://github.com/libsndfile/libsamplerate/releases/download/${sampleRateVersion}/libsamplerate-${sampleRateVersion}.tar.xz"
                dest downloadPath
            }

            exec {
                commandLine('xz', '-d', downloadPath)
            }

            copy {
                from tarTree(file(tarPath))
                into unpackPath
            }

            copy {
                from "$unpackPath/libsamplerate-${sampleRateVersion}/src"
                into "$projectDir/samplerate/src"
            }
        }

        if (!file("$projectDir/fdk-aac/libAACdec").exists()) {
            def downloadPath = "$buildDir/tmp/fdk-aac-v${fdkAacVersion}.tar.gz"
            def unpackPath = "$projectDir/fdk-aac"
            download.run {
                src "https://github.com/mstorsjo/fdk-aac/archive/v${fdkAacVersion}.tar.gz"
                dest downloadPath
            }

            copy {
                from tarTree(file(downloadPath))
                into unpackPath
            }
        }

        if (!file("$projectDir/vorbis/libogg-${oggVersion}").exists()) {
            def downloadPath = "$buildDir/tmp/libogg.tar.gz"
            def unpackPath = "$projectDir/vorbis"
            download.run {
                src "https://downloads.xiph.org/releases/ogg/libogg-${oggVersion}.tar.gz"
                dest downloadPath
            }

            copy {
                from tarTree(file(downloadPath))
                into unpackPath
            }

            downloadPath = "$buildDir/tmp/libvorbis.tar.gz"
            download.run {
                src "https://downloads.xiph.org/releases/vorbis/libvorbis-${vorbisVersion}.tar.gz"
                dest downloadPath
            }

            copy {
                from tarTree(file(downloadPath))
                into unpackPath
            }
        }

        if (!file("$projectDir/opus/opus-${opusVersion}").exists()) {
            def downloadPath = "$buildDir/tmp/libopus.tar.gz"
            def unpackPath = "$projectDir/opus"

            download.run {
                src "https://downloads.xiph.org/releases/opus/opus-${opusVersion}.tar.gz"
                dest downloadPath
            }

            copy {
                from tarTree(file(downloadPath))
                into unpackPath
            }
        }

        if (!Os.isFamily(Os.FAMILY_WINDOWS) && !file("$projectDir/mp3/mpg123-${mpg123Version}").exists()) {
            def downloadPath = "$buildDir/tmp/libmpg123.tar.bz2"
            def unpackPath = "$projectDir/mp3"

            download.run {
                src "https://www.mpg123.de/download/mpg123-${mpg123Version}.tar.bz2"
                dest downloadPath
            }

            copy {
                from tarTree(file(downloadPath))
                into unpackPath
            }
        }
    }
}

ext.devEnvPath = null

def getDevEnvLocation() {
    if (ext.devEnvPath == null) {
        def testDirectory = file("$buildDir/tmp/vsloc")
        testDirectory.deleteDir()
        testDirectory.mkdirs()

        new File(testDirectory, "CMakeLists.txt") << ""

        def outStream = new StringBuilder()
        def cmakeProcess = "cmake .".execute(null as String[], testDirectory)
        cmakeProcess.consumeProcessOutput(outStream, outStream)
        cmakeProcess.waitFor()

        def matcher = Pattern.compile("working C compiler: ([^\\n]*) -- works").matcher(outStream)
        matcher.find()

        def baseDirectory = file(matcher.group(1))

        while (!new File(baseDirectory, 'Common7').directory && baseDirectory.parentFile?.directory) {
            baseDirectory = baseDirectory.parentFile
        }

        ext.devEnvPath = new File(baseDirectory, "Common7/IDE/devenv.exe").absolutePath
    }

    return ext.devEnvPath
}

def buildOpusOnWindows(force) {
    def base = "$projectDir/libs/64"
    def libs = ['opus']
    def present = libs.every { file("${base}/${it}.lib").exists() }

    if (force || !present) {
        file(base).deleteDir()
        file(base).mkdirs()

        def devenv = getDevEnvLocation()
        def platformName = "x64"

        def process = [devenv, "opus.sln", "/Project", "opus", "/Build", "Release|${platformName}"].
            execute(null as String[], file("$projectDir/opus/opus-${opusVersion}/win32/VS2015"))

        process.waitForProcessOutput(System.out as Appendable, System.err)

        libs.each {
            assert file("$projectDir/opus/opus-${opusVersion}/win32/VS2015/${platformName}/Release/${it}.lib").renameTo("${base}/${it}.lib")
        }
    }
}

def waitForAndCheckSuccess(process, name) {
    process.waitForProcessOutput(System.out as Appendable, System.err)

    if (process.exitValue() != 0) {
        throw new IllegalStateException("${name} failed.")
    }
}

def buildOpusOnLinux(force) {
    def present = file("${projectDir}/libs/64/libopus.a").exists()

    if (force || !present) {
        def flags = "-fPIC -O3 -fdata-sections -ffunction-sections"
        def process = ["./configure", "--enable-static", "--with-cpu=x64-64", "--with-pic", "CFLAGS=${flags}", "CXXFLAGS=${flags}", "LDFLAGS=${flags}"].
            execute(null as String[], file("$projectDir/opus/opus-${opusVersion}"))

        waitForAndCheckSuccess(process, "Opus ./configure")

        process = ["make", "clean"].execute(null as String[], file("$projectDir/opus/opus-${opusVersion}"))
        waitForAndCheckSuccess(process, "Opus make clean")

        process = ["make"].execute(null as String[], file("$projectDir/opus/opus-${opusVersion}"))
        waitForAndCheckSuccess(process, "Opus make")

        copy {
            from "$projectDir/opus/opus-${opusVersion}/.libs/libopus.a"
            into "$projectDir/libs/64"
        }
    }
}

def buildMpg123OnLinux(force) {
    def present = file("${projectDir}/libs/64/libmpg123.a").exists()

    if (force || !present) {
        def flags = "-fPIC -O3 -fdata-sections -ffunction-sections"
        def process = ['./configure', '--enable-static', '--with-cpu=x86-64', '--with-pic', "CFLAGS=$flags", "CXXFLAGS=$flags"].
            execute(null as String[], file("$projectDir/mp3/mpg123-${mpg123Version}"))

        waitForAndCheckSuccess(process, "Mpg123 ./configure")

        process = ["make", "clean"].execute(null as String[], file("$projectDir/mp3/mpg123-${mpg123Version}"))
        waitForAndCheckSuccess(process, "make clean")

        process = ["make"].execute(null as String[], file("$projectDir/mp3/mpg123-${mpg123Version}"))
        waitForAndCheckSuccess(process, "make")

        copy {
            from "$projectDir/mp3/mpg123-${mpg123Version}/src/libmpg123/.libs/libmpg123.a"
            into "$projectDir/libs/64"
        }
    }
}

def prepareOggOnLinux(force) {
    def configured = file("$projectDir/vorbis/libogg-${oggVersion}/include/ogg/config_types.h").exists()

    if (force || !configured) {
        def process = ["./configure", "--enable-static", "--build=x86_64-pc-linux-gnu", "--with-pic"].
            execute(null as String[], file("$projectDir/vorbis/libogg-${oggVersion}"))

        process.waitForProcessOutput(System.out as Appendable, System.err)
    }
}

def prepareBuilds(force) {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        buildOpusOnWindows(force)
    } else {
        prepareOggOnLinux(force)
        buildOpusOnLinux(force)
        buildMpg123OnLinux(force)
    }
}

task compileNatives() {}
task checkNatives() {}

def buildTaskConfig = [
    buildBase      : buildDir,
    projectBase    : projectDir,
    deployBase     : project(':natives-publish').projectDir,
    setupDependency: tasks.load,
    setupDoFirst   : { config -> prepareBuilds(false) },
    compileTask    : tasks.compileNatives,
    checkTask      : tasks.checkNatives,
    name           : 'connector'
]

createBuildTask(tasks, buildTaskConfig)
